using System;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using SistemaChamados.Config;
using SistemaChamados.Controllers;
using SistemaChamados.Models;
using SistemaChamados.Forms;
using SistemaChamados.Data;

namespace SistemaChamados.Forms
{
    public partial class MenuPrincipalForm : Form
    {
        private Funcionarios _usuarioLogado;
        private FuncionariosController _funcionariosController;
        private ChamadosController _chamadosController;

        // Componentes do Sidebar
        private Panel panelSidebar;
        private Panel panelHeader;
        private Panel panelMenu;
        private Panel panelFooter;
        private Label lblNomeUsuario;
        private Label lblTipoUsuario;
        private PictureBox picAvatar;

        // Status bar
        private StatusStrip statusBar;
        private ToolStripStatusLabel lblDataHora;
        private ToolStripStatusLabel lblStatus;
        private System.Windows.Forms.Timer timerRelogio;
        private Panel panelPrincipal;

        public MenuPrincipalForm(Funcionarios usuarioLogado)
        {
            _usuarioLogado = usuarioLogado;
            var connectionString = DatabaseConfig.ConnectionString;
            var database = new SqlServerConnection(connectionString);
            _funcionariosController = new FuncionariosController(database);
            _chamadosController = new ChamadosController(database);

            InitializeComponent();
            ConfigurarFormulario();
            MostrarDashboard();
        }

        private void InitializeComponent()
        {
            this.Text = "Sistema de Chamados - InterFix";
            this.WindowState = FormWindowState.Maximized;
            this.StartPosition = FormStartPosition.CenterScreen;
            this.MinimumSize = new Size(1200, 700);
            this.BackColor = Color.White;

            // ========================================
            // SIDEBAR
            // ========================================
            this.panelSidebar = new Panel
            {
                Dock = DockStyle.Left,
                Width = 250,
                BackColor = Color.FromArgb(32, 33, 36)
            };

            // Header do Sidebar (Avatar e Info do Usu√°rio)
            this.panelHeader = new Panel
            {
                Dock = DockStyle.Top,
                Height = 150,
                BackColor = Color.FromArgb(41, 42, 45)
            };

            this.picAvatar = new PictureBox
            {
                Location = new Point(75, 20),
                Size = new Size(100, 100),
                SizeMode = PictureBoxSizeMode.StretchImage,
                BorderStyle = BorderStyle.FixedSingle
            };
            this.picAvatar.Image = CriarAvatarComIniciais(_usuarioLogado.Nome);

            this.lblNomeUsuario = new Label
            {
                Text = _usuarioLogado.Nome,
                Location = new Point(10, 125),
                Size = new Size(230, 20),
                Font = new Font("Segoe UI", 10F, FontStyle.Bold),
                ForeColor = Color.White,
                TextAlign = ContentAlignment.MiddleCenter
            };

            this.panelHeader.Controls.Add(picAvatar);
            this.panelHeader.Controls.Add(lblNomeUsuario);

            // Menu do Sidebar
            this.panelMenu = new Panel
            {
                Dock = DockStyle.Fill,
                BackColor = Color.FromArgb(32, 33, 36),
                AutoScroll = true,
                Padding = new Padding(0, 10, 0, 10)
            };

            // üéØ CONSTRUIR MENU DIN√ÅMICO POR NIVEL DE ACCESO
            ConstruirMenuSidebarPorNivel();

            // Footer do Sidebar
            this.panelFooter = new Panel
            {
                Dock = DockStyle.Bottom,
                Height = 60,
                BackColor = Color.FromArgb(41, 42, 45)
            };

            this.lblTipoUsuario = new Label
            {
                Text = $"üîë {ObterTextoNivelAcesso(_usuarioLogado.NivelAcesso)}",
                Location = new Point(10, 10),
                Size = new Size(230, 20),
                Font = new Font("Segoe UI", 9F, FontStyle.Bold),
                ForeColor = Color.FromArgb(100, 200, 255),
                TextAlign = ContentAlignment.MiddleCenter
            };

            var lblVersao = new Label
            {
                Text = "v1.0.0 - InterFix",
                Location = new Point(10, 35),
                Size = new Size(230, 15),
                Font = new Font("Segoe UI", 8F),
                ForeColor = Color.Gray,
                TextAlign = ContentAlignment.MiddleCenter
            };

            this.panelFooter.Controls.Add(lblTipoUsuario);
            this.panelFooter.Controls.Add(lblVersao);

            this.panelSidebar.Controls.Add(panelMenu);
            this.panelSidebar.Controls.Add(panelHeader);
            this.panelSidebar.Controls.Add(panelFooter);

            // ========================================
            // STATUS BAR
            // ========================================
            this.statusBar = new StatusStrip
            {
                BackColor = Color.FromArgb(240, 240, 240)
            };

            this.lblStatus = new ToolStripStatusLabel
            {
                Text = "Sistema operando normalmente",
                BorderSides = ToolStripStatusLabelBorderSides.Right
            };

            this.lblDataHora = new ToolStripStatusLabel
            {
                Spring = true,
                TextAlign = ContentAlignment.MiddleRight
            };

            this.statusBar.Items.AddRange(new ToolStripItem[] {
                this.lblStatus,
                this.lblDataHora
            });

            // ========================================
            // PANEL PRINCIPAL (Conte√∫do)
            // ========================================
            this.panelPrincipal = new Panel
            {
                Dock = DockStyle.Fill,
                BackColor = Color.FromArgb(248, 249, 250),
                AutoScroll = true
            };

            // Timer
            this.timerRelogio = new System.Windows.Forms.Timer
            {
                Interval = 1000
            };
            this.timerRelogio.Tick += TimerRelogio_Tick;
            this.timerRelogio.Start();

            // Adicionar ao Form
            this.Controls.Add(panelPrincipal);
            this.Controls.Add(statusBar);
            this.Controls.Add(panelSidebar);

            this.FormClosing += MenuPrincipalForm_FormClosing;
        }

        /// <summary>
        /// üéØ Construir sidebar din√°micamente seg√∫n nivel de acceso
        /// </summary>
        private void ConstruirMenuSidebarPorNivel()
        {
            panelMenu.Controls.Clear();
            int yPos = 10;

            // ========================================
            // BOT√ìN DASHBOARD - TODOS
            // ========================================
            var btnDashboard = CriarBotaoMenu("üè†  Dashboard", yPos);
            btnDashboard.Click += (s, e) => MostrarDashboard();
            yPos += 55;

            // ========================================
            // MEN√ö SEG√öN NIVEL DE ACCESO
            // ========================================
            switch (_usuarioLogado.NivelAcesso)
            {
                case 1: // üë§ FUNCION√ÅRIO
                    yPos = ConstruirMenuFuncionario(yPos);
                    break;

                case 2: // üîß T√âCNICO
                    yPos = ConstruirMenuTecnico(yPos);
                    break;

                case 3: // üëë ADMINISTRADOR
                    yPos = ConstruirMenuAdministrador(yPos);
                    break;
            }

            // ========================================
            // SE√á√ÉO AJUDA - TODOS
            // ========================================
            var lblAjuda = CriarLabelSecao("AJUDA", yPos);
            yPos += 30;

            var btnManual = CriarBotaoMenu("üìñ  Manual do Usu√°rio", yPos);
            btnManual.Click += (s, e) => ItemManual_Click(s, e);
            yPos += 55;

            // ========================================
            // SE√á√ÉO SISTEMA - TODOS
            // ========================================
            var lblSistema = CriarLabelSecao("SISTEMA", yPos);
            yPos += 30;

            // Alterar Senha - SOLO ADMIN
            if (_usuarioLogado.NivelAcesso == 3)
            {
                var btnConfiguracoes = CriarBotaoMenu("üîß  Alterar Senha", yPos);
                btnConfiguracoes.Click += (s, e) => ItemAlterarSenha_Click(s, e);
                yPos += 55;
            }

            // Logout - TODOS
            var btnLogout = CriarBotaoMenu("üîì  Logout", yPos);
            btnLogout.Click += (s, e) => ItemLogout_Click(s, e);
            btnLogout.BackColor = Color.FromArgb(255, 193, 7);
            btnLogout.ForeColor = Color.Black;
            yPos += 55;

            // Sair - TODOS
            var btnSair = CriarBotaoMenu("üö™  Sair do Sistema", yPos);
            btnSair.Click += (s, e) => ItemSair_Click(s, e);
            btnSair.BackColor = Color.FromArgb(220, 53, 69);
        }

        /// <summary>
        /// Menu espec√≠fico para FUNCION√ÅRIO
        /// </summary>
        private int ConstruirMenuFuncionario(int yPos)
        {
            var lblChamados = CriarLabelSecao("CHAMADOS", yPos);
            yPos += 30;

            var btnNovo = CriarBotaoMenu("‚ûï  Novo Chamado", yPos);
            btnNovo.Click += (s, e) => ItemNovoChamado_Click(s, e);
            yPos += 55;

            var btnVisualizar = CriarBotaoMenu("üëÅÔ∏è  Meus Chamados", yPos);
            btnVisualizar.Click += (s, e) => ItemVisualizarChamados_Click(s, e);
            yPos += 55;

            return yPos;
        }

        /// <summary>
        /// Menu espec√≠fico para T√âCNICO
        /// </summary>
        private int ConstruirMenuTecnico(int yPos)
        {
            var lblChamados = CriarLabelSecao("CHAMADOS", yPos);
            yPos += 30;

            var btnVisualizar = CriarBotaoMenu("üëÅÔ∏è  Visualizar Chamados", yPos);
            btnVisualizar.Click += (s, e) => ItemVisualizarChamados_Click(s, e);
            yPos += 55;

            var btnGerenciar = CriarBotaoMenu("‚öôÔ∏è  Gerenciar Chamados", yPos);
            btnGerenciar.Click += (s, e) => ItemGerenciarChamados_Click(s, e);
            yPos += 55;

            // Se√ß√£o Relat√≥rios
            var lblRelatorios = CriarLabelSecao("RELAT√ìRIOS", yPos);
            yPos += 30;

            var btnRelatorios = CriarBotaoMenu("üìä  Relat√≥rios", yPos);
            btnRelatorios.Click += (s, e) => ItemRelatorioChamados_Click(s, e);
            yPos += 55;

            return yPos;
        }

        /// <summary>
        /// Menu espec√≠fico para ADMINISTRADOR
        /// </summary>
        private int ConstruirMenuAdministrador(int yPos)
        {
            // Se√ß√£o Chamados
            var lblChamados = CriarLabelSecao("CHAMADOS", yPos);
            yPos += 30;

            var btnNovo = CriarBotaoMenu("‚ûï  Novo Chamado", yPos);
            btnNovo.Click += (s, e) => ItemNovoChamado_Click(s, e);
            yPos += 55;

            var btnVisualizar = CriarBotaoMenu("üëÅÔ∏è  Visualizar Chamados", yPos);
            btnVisualizar.Click += (s, e) => ItemVisualizarChamados_Click(s, e);
            yPos += 55;

            var btnGerenciar = CriarBotaoMenu("‚öôÔ∏è  Gerenciar Chamados", yPos);
            btnGerenciar.Click += (s, e) => ItemGerenciarChamados_Click(s, e);
            yPos += 55;

            // Se√ß√£o Usu√°rios
            var lblUsuarios = CriarLabelSecao("USU√ÅRIOS", yPos);
            yPos += 30;

            var btnNovoUsuario = CriarBotaoMenu("üë§  Novo Usu√°rio", yPos);
            btnNovoUsuario.Click += (s, e) => ItemNovoUsuario_Click(s, e);
            yPos += 55;

            var btnGerenciarUsuarios = CriarBotaoMenu("üë•  Gerenciar Usu√°rios", yPos);
            btnGerenciarUsuarios.Click += (s, e) => ItemGerenciarUsuarios_Click(s, e);
            yPos += 55;

            // Se√ß√£o Relat√≥rios
            var lblRelatorios = CriarLabelSecao("RELAT√ìRIOS", yPos);
            yPos += 30;

            var btnRelatorios = CriarBotaoMenu("üìä  Relat√≥rios", yPos);
            btnRelatorios.Click += (s, e) => ItemRelatorioChamados_Click(s, e);
            yPos += 55;

            return yPos;
        }

        #region M√©todos Auxiliares de UI

        private Button CriarBotaoMenu(string texto, int yPos)
        {
            var btn = new Button
            {
                Text = texto,
                Location = new Point(10, yPos),
                Size = new Size(230, 45),
                FlatStyle = FlatStyle.Flat,
                Font = new Font("Segoe UI", 10F, FontStyle.Regular),
                ForeColor = Color.White,
                BackColor = Color.Transparent,
                TextAlign = ContentAlignment.MiddleLeft,
                Cursor = Cursors.Hand,
                Padding = new Padding(15, 0, 0, 0)
            };

            btn.FlatAppearance.BorderSize = 0;
            btn.FlatAppearance.MouseOverBackColor = Color.FromArgb(50, 52, 55);
            btn.FlatAppearance.MouseDownBackColor = Color.FromArgb(60, 62, 65);

            this.panelMenu.Controls.Add(btn);
            return btn;
        }

        private Label CriarLabelSecao(string texto, int yPos)
        {
            var lbl = new Label
            {
                Text = texto,
                Location = new Point(15, yPos),
                Size = new Size(220, 20),
                Font = new Font("Segoe UI", 8F, FontStyle.Bold),
                ForeColor = Color.FromArgb(150, 150, 150),
                TextAlign = ContentAlignment.MiddleLeft
            };
            this.panelMenu.Controls.Add(lbl);
            return lbl;
        }

        private Image CriarAvatarComIniciais(string nome)
        {
            var bitmap = new Bitmap(100, 100);
            using (var graphics = Graphics.FromImage(bitmap))
            {
                graphics.Clear(Color.FromArgb(0, 123, 255));

                string iniciais = ObterIniciais(nome);
                using (var font = new Font("Segoe UI", 32F, FontStyle.Bold))
                using (var brush = new SolidBrush(Color.White))
                {
                    var sf = new StringFormat
                    {
                        Alignment = StringAlignment.Center,
                        LineAlignment = StringAlignment.Center
                    };
                    graphics.DrawString(iniciais, font, brush, new RectangleF(0, 0, 100, 100), sf);
                }
            }
            return bitmap;
        }

        private string ObterIniciais(string nome)
        {
            var partes = nome.Split(' ');
            if (partes.Length >= 2)
                return $"{partes[0][0]}{partes[1][0]}".ToUpper();
            return nome.Length >= 2 ? nome.Substring(0, 2).ToUpper() : nome.ToUpper();
        }

        #endregion

        #region Dashboard

        private void MostrarDashboard()
        {
            panelPrincipal.Controls.Clear();

            // T√≠tulo
            var lblTitulo = new Label
            {
                Text = $"Bem-vindo, {_usuarioLogado.Nome}!",
                Location = new Point(40, 30),
                Size = new Size(600, 35),
                Font = new Font("Segoe UI", 20F, FontStyle.Bold),
                ForeColor = Color.FromArgb(32, 33, 36)
            };
            panelPrincipal.Controls.Add(lblTitulo);

            var lblSubtitulo = new Label
            {
                Text = $"N√≠vel de acesso: {ObterTextoNivelAcesso(_usuarioLogado.NivelAcesso)}",
                Location = new Point(40, 75),
                Size = new Size(400, 20),
                Font = new Font("Segoe UI", 11F),
                ForeColor = Color.Gray
            };
            panelPrincipal.Controls.Add(lblSubtitulo);

            // Cards de estat√≠sticas
            int xPos = 40;
            int yPos = 130;

            try
            {
                var chamados = _chamadosController.ListarTodosChamados();

                // Card 1: Total
                var cardTotal = CriarCardDashboard(
                    "Total de Chamados",
                    chamados.Count.ToString(),
                    Color.FromArgb(0, 123, 255),
                    new Point(xPos, yPos)
                );
                panelPrincipal.Controls.Add(cardTotal);
                xPos += 260;

                // Card 2: Abertos
                int abertos = chamados.Count(c => (int)c.Status == 1);
                var cardAbertos = CriarCardDashboard(
                    "Chamados Abertos",
                    abertos.ToString(),
                    Color.FromArgb(255, 193, 7),
                    new Point(xPos, yPos)
                );
                panelPrincipal.Controls.Add(cardAbertos);
                xPos += 260;

                // Card 3: Em Andamento
                int emAndamento = chamados.Count(c => (int)c.Status == 2);
                var cardAndamento = CriarCardDashboard(
                    "Em Andamento",
                    emAndamento.ToString(),
                    Color.FromArgb(23, 162, 184),
                    new Point(xPos, yPos)
                );
                panelPrincipal.Controls.Add(cardAndamento);
                xPos += 260;

                // Card 4: Resolvidos
                int resolvidos = chamados.Count(c => (int)c.Status == 3 || (int)c.Status == 4);
                var cardResolvidos = CriarCardDashboard(
                    "Resolvidos",
                    resolvidos.ToString(),
                    Color.FromArgb(40, 167, 69),
                    new Point(xPos, yPos)
                );
                panelPrincipal.Controls.Add(cardResolvidos);
            }
            catch
            {
                var lblErro = new Label
                {
                    Text = "Erro ao carregar estat√≠sticas",
                    Location = new Point(40, yPos),
                    Size = new Size(300, 30),
                    Font = new Font("Segoe UI", 11F),
                    ForeColor = Color.Red
                };
                panelPrincipal.Controls.Add(lblErro);
            }

            // Atalhos r√°pidos
            yPos += 180;
            var lblAtalhos = new Label
            {
                Text = "‚ö° Atalhos R√°pidos",
                Location = new Point(40, yPos),
                Size = new Size(200, 30),
                Font = new Font("Segoe UI", 14F, FontStyle.Bold),
                ForeColor = Color.FromArgb(32, 33, 36)
            };
            panelPrincipal.Controls.Add(lblAtalhos);
            yPos += 50;

            // Bot√µes de atalho seg√∫n nivel
            int xPosAtalho = 40;

            if (_usuarioLogado.NivelAcesso == 1 || _usuarioLogado.NivelAcesso == 3)
            {
                var btnAtalhoNovo = CriarBotaoAtalho("‚ûï Novo Chamado", new Point(xPosAtalho, yPos));
                btnAtalhoNovo.Click += (s, e) => ItemNovoChamado_Click(s, e);
                panelPrincipal.Controls.Add(btnAtalhoNovo);
                xPosAtalho += 240;
            }

            var btnAtalhoVisualizar = CriarBotaoAtalho("üëÅÔ∏è Ver Chamados", new Point(xPosAtalho, yPos));
            btnAtalhoVisualizar.Click += (s, e) => ItemVisualizarChamados_Click(s, e);
            panelPrincipal.Controls.Add(btnAtalhoVisualizar);
            xPosAtalho += 240;

            if (_usuarioLogado.NivelAcesso >= 2)
            {
                var btnAtalhoGerenciar = CriarBotaoAtalho("‚öôÔ∏è Gerenciar", new Point(xPosAtalho, yPos));
                btnAtalhoGerenciar.Click += (s, e) => ItemGerenciarChamados_Click(s, e);
                panelPrincipal.Controls.Add(btnAtalhoGerenciar);
            }

            lblStatus.Text = "Dashboard carregado";
        }

        private Panel CriarCardDashboard(string titulo, string valor, Color cor, Point localizacao)
        {
            var panel = new Panel
            {
                Location = localizacao,
                Size = new Size(240, 120),
                BackColor = Color.White,
                BorderStyle = BorderStyle.FixedSingle
            };

            var barraTop = new Panel
            {
                Dock = DockStyle.Top,
                Height = 5,
                BackColor = cor
            };
            panel.Controls.Add(barraTop);

            var lblTitulo = new Label
            {
                Text = titulo,
                Location = new Point(15, 20),
                Size = new Size(210, 25),
                Font = new Font("Segoe UI", 10F),
                ForeColor = Color.Gray
            };
            panel.Controls.Add(lblTitulo);

            var lblValor = new Label
            {
                Text = valor,
                Location = new Point(15, 50),
                Size = new Size(210, 45),
                Font = new Font("Segoe UI", 28F, FontStyle.Bold),
                ForeColor = cor
            };
            panel.Controls.Add(lblValor);

            return panel;
        }

        private Button CriarBotaoAtalho(string texto, Point localizacao)
        {
            var btn = new Button
            {
                Text = texto,
                Location = localizacao,
                Size = new Size(220, 50),
                BackColor = Color.FromArgb(0, 123, 255),
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                Font = new Font("Segoe UI", 11F, FontStyle.Bold),
                Cursor = Cursors.Hand
            };
            btn.FlatAppearance.BorderSize = 0;
            return btn;
        }

        #endregion

        #region Eventos del Men√∫

        private void ItemNovoChamado_Click(object sender, EventArgs e)
        {
            try
            {
                var formCriarChamado = new CriarChamadoForm(_usuarioLogado, _chamadosController);
                formCriarChamado.ShowDialog(this);
                MostrarDashboard();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Erro ao abrir formul√°rio: {ex.Message}", "Erro",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ItemVisualizarChamados_Click(object sender, EventArgs e)
        {
            try
            {
                var formVisualizarChamados = new VisualizarChamadosForm(_usuarioLogado, _chamadosController);
                formVisualizarChamados.ShowDialog(this);
                MostrarDashboard();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Erro ao abrir formul√°rio: {ex.Message}", "Erro",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ItemGerenciarChamados_Click(object sender, EventArgs e)
        {
            try
            {
                if (_usuarioLogado.NivelAcesso >= 2)
                {
                    var formGerenciarChamados = new GerenciarChamadosForm(_usuarioLogado, _chamadosController, _funcionariosController);
                    formGerenciarChamados.ShowDialog(this);
                    MostrarDashboard();
                }
                else
                {
                    MessageBox.Show("Acesso negado. Apenas t√©cnicos e administradores podem gerenciar chamados.",
                        "Acesso Negado", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Erro ao abrir formul√°rio: {ex.Message}", "Erro",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ItemNovoUsuario_Click(object sender, EventArgs e)
        {
            try
            {
                if (_usuarioLogado.NivelAcesso >= 3)
                {
                    if (!ConfirmarSenhaAdmin())
                    {
                        MessageBox.Show("Opera√ß√£o cancelada.", "Cancelado",
                            MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                    var formNovoUsuario = new NovoUsuarioForm(_funcionariosController);
                    if (formNovoUsuario.ShowDialog(this) == DialogResult.OK)
                    {
                        MessageBox.Show("Usu√°rio criado com sucesso!", "Sucesso",
                            MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
                else
                {
                    MessageBox.Show("Acesso negado. Apenas administradores podem criar usu√°rios.",
                        "Acesso Negado", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Erro ao abrir formul√°rio: {ex.Message}", "Erro",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ItemGerenciarUsuarios_Click(object sender, EventArgs e)
        {
            try
            {
                if (_usuarioLogado.NivelAcesso >= 3)
                {
                    var formGerenciarUsuarios = new GerenciarUsuariosForm(_usuarioLogado, _funcionariosController);
                    formGerenciarUsuarios.ShowDialog(this);
                }
                else
                {
                    MessageBox.Show("Acesso negado. Apenas administradores podem gerenciar usu√°rios.",
                        "Acesso Negado", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Erro ao abrir formul√°rio: {ex.Message}", "Erro",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ItemRelatorioChamados_Click(object sender, EventArgs e)
        {
            try
            {
                var formRelatorios = new RelatoriosForm(_usuarioLogado, _chamadosController, _funcionariosController);
                formRelatorios.ShowDialog(this);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Erro ao abrir relat√≥rios: {ex.Message}", "Erro",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ItemManual_Click(object sender, EventArgs e)
        {
            try
            {
                string manualPath = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Manual_Usuario.pdf");

                if (System.IO.File.Exists(manualPath))
                {
                    // Abrir el PDF com el programa predeterminado
                    System.Diagnostics.Process.Start(manualPath);
                }
                else
                {
                    // Mostrar manual de ayuda integrado
                    var formManual = new ManualUsuarioForm(_usuarioLogado.NivelAcesso);
                    formManual.ShowDialog(this);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(
                    "Manual do usu√°rio em breve.\n\n" +
                    "Para d√∫vidas, entre em contato com o suporte t√©cnico.\n\n" +
                    $"Erro: {ex.Message}",
                    "Manual do Usu√°rio",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Information);
            }
        }

        private void ItemAlterarSenha_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ConfirmarSenhaAdmin())
                {
                    MessageBox.Show("Opera√ß√£o cancelada.", "Cancelado",
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                var formAlterarSenha = new AlterarSenhaForm(_usuarioLogado, _funcionariosController);
                if (formAlterarSenha.ShowDialog(this) == DialogResult.OK)
                {
                    MessageBox.Show("Senha alterada com sucesso!", "Sucesso",
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Erro ao abrir formul√°rio: {ex.Message}", "Erro",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ItemLogout_Click(object sender, EventArgs e)
        {
            var resultado = MessageBox.Show("Deseja realmente fazer logout?", "Confirmar Logout",
                MessageBoxButtons.YesNo, MessageBoxIcon.Question);

            if (resultado == DialogResult.Yes)
            {
                if (timerRelogio != null)
                {
                    timerRelogio.Stop();
                    timerRelogio.Dispose();
                }

                var loginForm = new LoginForm();
                loginForm.FormClosed += (s, args) => this.Dispose();
                this.Hide();
                loginForm.Show();
            }
        }

        private void ItemSair_Click(object sender, EventArgs e)
        {
            var resultado = MessageBox.Show("Deseja realmente sair do sistema?", "Confirmar Sa√≠da",
                MessageBoxButtons.YesNo, MessageBoxIcon.Question);

            if (resultado == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        #endregion

        #region M√©todos de Suporte

        private void ConfigurarFormulario()
        {
            TimerRelogio_Tick(null, null);
        }

        private string ObterTextoNivelAcesso(int nivel)
        {
            if (nivel == 1)
                return "Funcion√°rio";
            else if (nivel == 2)
                return "T√©cnico";
            else if (nivel == 3)
                return "Administrador";
            else
                return "Desconhecido";
        }

        private void TimerRelogio_Tick(object sender, EventArgs e)
        {
            lblDataHora.Text = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
        }

        private void MenuPrincipalForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (e.CloseReason == CloseReason.UserClosing)
            {
                var resultado = MessageBox.Show("Deseja realmente sair do sistema?", "Confirmar Sa√≠da",
                    MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                if (resultado == DialogResult.No)
                {
                    e.Cancel = true;
                }
            }
        }

        private bool ConfirmarSenhaAdmin()
        {
            var formConfirmar = new ConfirmarSenhaAdminForm(_usuarioLogado);
            return formConfirmar.ShowDialog() == DialogResult.OK;
        }

        #endregion
    }

    #region Formulario Manual de Usuario

    /// <summary>
    /// Formul√°rio integrado para mostrar manual do usu√°rio
    /// </summary>
    public class ManualUsuarioForm : Form
    {
        private int _nivelAcesso;
        private TabControl tabControl;
        private Button btnFechar;

        public ManualUsuarioForm(int nivelAcesso)
        {
            _nivelAcesso = nivelAcesso;
            InitializeComponent();
            CarregarConteudo();
        }

        private void InitializeComponent()
        {
            this.Text = "Manual do Usu√°rio - InterFix";
            this.Size = new Size(900, 650);
            this.StartPosition = FormStartPosition.CenterParent;
            this.FormBorderStyle = FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            this.BackColor = Color.White;

            // Header
            var lblTitulo = new Label
            {
                Text = "üìñ Manual do Usu√°rio",
                Font = new Font("Segoe UI", 18F, FontStyle.Bold),
                Location = new Point(30, 20),
                Size = new Size(400, 35),
                ForeColor = Color.FromArgb(0, 123, 255)
            };
            this.Controls.Add(lblTitulo);

            // TabControl
            tabControl = new TabControl
            {
                Location = new Point(20, 70),
                Size = new Size(840, 480),
                Font = new Font("Segoe UI", 10F)
            };
            this.Controls.Add(tabControl);

            // Bot√£o Fechar
            btnFechar = new Button
            {
                Text = "Fechar",
                Location = new Point(760, 560),
                Size = new Size(100, 35),
                BackColor = Color.FromArgb(108, 117, 125),
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                Font = new Font("Segoe UI", 10F),
                Cursor = Cursors.Hand
            };
            btnFechar.FlatAppearance.BorderSize = 0;
            btnFechar.Click += (s, e) => this.Close();
            this.Controls.Add(btnFechar);
        }

        private void CarregarConteudo()
        {
            // Aba: Primeiros Passos
            var tabInicio = new TabPage("üöÄ In√≠cio");
            tabInicio.BackColor = Color.White;
            tabInicio.Controls.Add(CriarPanelConteudo(ObterConteudoInicio()));
            tabControl.TabPages.Add(tabInicio);

            // Aba: Como Criar Chamado (Funcion√°rio e Admin)
            if (_nivelAcesso == 1 || _nivelAcesso == 3)
            {
                var tabCriar = new TabPage("‚ûï Criar Chamado");
                tabCriar.BackColor = Color.White;
                tabCriar.Controls.Add(CriarPanelConteudo(ObterConteudoCriarChamado()));
                tabControl.TabPages.Add(tabCriar);
            }

            // Aba: Gerenciar Chamados (T√©cnico e Admin)
            if (_nivelAcesso >= 2)
            {
                var tabGerenciar = new TabPage("‚öôÔ∏è Gerenciar");
                tabGerenciar.BackColor = Color.White;
                tabGerenciar.Controls.Add(CriarPanelConteudo(ObterConteudoGerenciar()));
                tabControl.TabPages.Add(tabGerenciar);
            }

            // Aba: Usu√°rios (Solo Admin)
            if (_nivelAcesso == 3)
            {
                var tabUsuarios = new TabPage("üë• Usu√°rios");
                tabUsuarios.BackColor = Color.White;
                tabUsuarios.Controls.Add(CriarPanelConteudo(ObterConteudoUsuarios()));
                tabControl.TabPages.Add(tabUsuarios);
            }

            // Aba: FAQ
            var tabFAQ = new TabPage("‚ùì Perguntas Frequentes");
            tabFAQ.BackColor = Color.White;
            tabFAQ.Controls.Add(CriarPanelConteudo(ObterConteudoFAQ()));
            tabControl.TabPages.Add(tabFAQ);
        }

        private Panel CriarPanelConteudo(string conteudo)
        {
            var panel = new Panel
            {
                Dock = DockStyle.Fill,
                AutoScroll = true,
                Padding = new Padding(20)
            };

            var richTextBox = new RichTextBox
            {
                Dock = DockStyle.Fill,
                ReadOnly = true,
                BorderStyle = BorderStyle.None,
                BackColor = Color.White,
                Font = new Font("Segoe UI", 10F),
                Text = conteudo
            };

            panel.Controls.Add(richTextBox);
            return panel;
        }

        private string ObterConteudoInicio()
        {
            return @"BEM-VINDO AO SISTEMA INTERFIX!

Este √© o Sistema de Gerenciamento de Chamados da InterFix.

üìã O QUE √â O SISTEMA?
O sistema permite que voc√™ registre e acompanhe problemas t√©cnicos, solicita√ß√µes de suporte e manuten√ß√µes.

üë§ SEU N√çVEL DE ACESSO: " + ObterTextoNivel() + @"

üéØ FUNCIONALIDADES DISPON√çVEIS:
" + ObterFuncionalidadesDisponiveis() + @"

‚å®Ô∏è ATALHOS DE TECLADO:
‚Ä¢ Dashboard: Clique no bot√£o üè† na barra lateral
‚Ä¢ F1: Abrir este manual
‚Ä¢ Alt+F4: Fechar o sistema

üí° DICA:
Use a barra lateral √† esquerda para navegar entre as diferentes se√ß√µes do sistema.

Para mais informa√ß√µes sobre cada funcionalidade, navegue pelas abas acima.";
        }

        private string ObterConteudoCriarChamado()
        {
            return @"COMO CRIAR UM NOVO CHAMADO

üìù PASSO A PASSO:

1. ACESSAR CRIA√á√ÉO
   ‚Ä¢ Clique em '‚ûï Novo Chamado' na barra lateral
   ‚Ä¢ Ou use o atalho r√°pido no Dashboard

2. ETAPA 1 - DESCRI√á√ÉO DO PROBLEMA
   ‚Ä¢ Digite um t√≠tulo claro (ex: ""Impressora n√£o funciona"")
   ‚Ä¢ Selecione a categoria: Hardware, Software, Rede ou Outros
   ‚Ä¢ Descreva detalhadamente o problema (m√≠nimo 20 caracteres)

3. ETAPA 2 - QUEM √â AFETADO
   ‚Ä¢ Apenas eu: Problema afeta s√≥ voc√™
   ‚Ä¢ Meu departamento: Afeta seu setor
   ‚Ä¢ Empresa toda: Problema generalizado

4. ETAPA 3 - IMPACTO NO TRABALHO
   ‚Ä¢ Sim, n√£o consigo trabalhar: Alta prioridade
   ‚Ä¢ N√£o, consigo trabalhar: Prioridade normal

5. CONFIRMA√á√ÉO
   ‚Ä¢ Revise as informa√ß√µes
   ‚Ä¢ Clique em 'Concluir'
   ‚Ä¢ Anote o n√∫mero do chamado gerado

üìä PRIORIDADES (calculadas automaticamente):
‚Ä¢ Baixa: N√£o impede trabalho, afeta s√≥ voc√™
‚Ä¢ M√©dia: N√£o impede, mas afeta departamento
‚Ä¢ Alta: Impede trabalho do departamento
‚Ä¢ Cr√≠tica: Impede trabalho da empresa toda

‚úÖ DEPOIS DE CRIAR:
‚Ä¢ Voc√™ receber√° um n√∫mero de protocolo
‚Ä¢ Pode acompanhar o status em 'Ver Meus Chamados'
‚Ä¢ Receber√° notifica√ß√µes de atualiza√ß√µes";
        }

        private string ObterConteudoGerenciar()
        {
            return @"GERENCIAMENTO DE CHAMADOS (T√âCNICO/ADMIN)

‚öôÔ∏è FUNCIONALIDADES:

1. VISUALIZAR CHAMADOS
   ‚Ä¢ Ver todos os chamados do sistema
   ‚Ä¢ Filtrar por status, prioridade, t√©cnico
   ‚Ä¢ Buscar por palavra-chave

2. ATRIBUIR CHAMADO
   ‚Ä¢ Selecione o chamado
   ‚Ä¢ Clique em 'Atribuir T√©cnico'
   ‚Ä¢ Escolha o t√©cnico respons√°vel
   ‚Ä¢ Status muda para 'Em Andamento'

3. ALTERAR PRIORIDADE
   ‚Ä¢ Selecione o chamado
   ‚Ä¢ Clique em 'Alterar Prioridade'
   ‚Ä¢ Escolha: Baixa, M√©dia, Alta ou Cr√≠tica

4. RESOLVER CHAMADO
   ‚Ä¢ Selecione o chamado
   ‚Ä¢ Clique em 'Marcar como Resolvido'
   ‚Ä¢ Adicione a solu√ß√£o aplicada
   ‚Ä¢ Status muda para 'Resolvido'

5. FECHAR CHAMADO
   ‚Ä¢ Ap√≥s resolver, aguarde confirma√ß√£o
   ‚Ä¢ Clique em 'Fechar Chamado'
   ‚Ä¢ Status muda para 'Fechado'

üìã STATUS DOS CHAMADOS:
‚Ä¢ Aberto: Aguardando atribui√ß√£o
‚Ä¢ Em Andamento: T√©cnico est√° trabalhando
‚Ä¢ Resolvido: Problema foi solucionado
‚Ä¢ Fechado: Chamado finalizado
‚Ä¢ Cancelado: Chamado foi cancelado

üéØ BOAS PR√ÅTICAS:
‚Ä¢ Sempre adicione coment√°rios ao resolver
‚Ä¢ Mantenha os chamados atualizados
‚Ä¢ Priorize chamados cr√≠ticos
‚Ä¢ Comunique-se com o solicitante";
        }

        private string ObterConteudoUsuarios()
        {
            return @"GERENCIAMENTO DE USU√ÅRIOS (ADMINISTRADOR)

üë• FUNCIONALIDADES ADMINISTRATIVAS:

1. CRIAR NOVO USU√ÅRIO
   ‚Ä¢ Clique em 'üë§ Novo Usu√°rio'
   ‚Ä¢ Confirme sua senha de administrador
   ‚Ä¢ Preencha os dados do novo usu√°rio
   ‚Ä¢ Defina o n√≠vel de acesso:
     - Funcion√°rio: Pode criar e ver seus chamados
     - T√©cnico: Pode gerenciar chamados
     - Administrador: Acesso completo

2. EDITAR USU√ÅRIO
   ‚Ä¢ Em 'Gerenciar Usu√°rios', selecione o usu√°rio
   ‚Ä¢ Clique em 'Editar'
   ‚Ä¢ Confirme sua senha
   ‚Ä¢ Altere os dados necess√°rios

3. ALTERAR N√çVEL DE ACESSO
   ‚Ä¢ Selecione o usu√°rio
   ‚Ä¢ Clique em 'Alterar N√≠vel'
   ‚Ä¢ Confirme sua senha
   ‚Ä¢ Escolha o novo n√≠vel

4. ALTERAR SENHA DE USU√ÅRIO
   ‚Ä¢ Selecione o usu√°rio
   ‚Ä¢ Clique em 'Alterar Senha'
   ‚Ä¢ Confirme sua senha de admin
   ‚Ä¢ Digite a nova senha do usu√°rio

5. ATIVAR/DESATIVAR USU√ÅRIO
   ‚Ä¢ Selecione o usu√°rio
   ‚Ä¢ Clique em 'Ativar/Desativar'
   ‚Ä¢ Confirme a a√ß√£o

6. EXCLUIR USU√ÅRIO
   ‚Ä¢ Selecione o usu√°rio
   ‚Ä¢ Clique em 'Excluir'
   ‚Ä¢ ATEN√á√ÉO: A√ß√£o irrevers√≠vel!
   ‚Ä¢ Confirme sua senha

‚ö†Ô∏è RESTRI√á√ïES DE SEGURAN√áA:
‚Ä¢ N√£o pode alterar seu pr√≥prio n√≠vel
‚Ä¢ N√£o pode desativar sua pr√≥pria conta
‚Ä¢ N√£o pode excluir sua pr√≥pria conta
‚Ä¢ Todas as a√ß√µes cr√≠ticas requerem confirma√ß√£o de senha

üîí N√çVEIS DE ACESSO:
‚Ä¢ Funcion√°rio (N√≠vel 1): Criar e visualizar pr√≥prios chamados
‚Ä¢ T√©cnico (N√≠vel 2): Gerenciar todos os chamados
‚Ä¢ Administrador (N√≠vel 3): Controle total do sistema";
        }

        private string ObterConteudoFAQ()
        {
            return @"PERGUNTAS FREQUENTES (FAQ)

‚ùì COMO FA√áO LOGIN?
Use seu e-mail corporativo e a senha fornecida pelo administrador.

‚ùì ESQUECI MINHA SENHA
Entre em contato com o administrador do sistema.

‚ùì QUANTO TEMPO LEVA PARA RESOLVER UM CHAMADO?
Depende da prioridade:
‚Ä¢ Cr√≠tica: At√© 4 horas
‚Ä¢ Alta: At√© 1 dia √∫til
‚Ä¢ M√©dia: At√© 3 dias √∫teis
‚Ä¢ Baixa: At√© 1 semana

‚ùì POSSO CANCELAR UM CHAMADO?
Sim, entre em contato com o t√©cnico respons√°vel ou administrador.

‚ùì COMO ACOMPANHO MEU CHAMADO?
Acesse 'Ver Meus Chamados' na barra lateral.

‚ùì POSSO CRIAR CHAMADO PARA OUTRA PESSOA?
N√£o, cada usu√°rio deve criar seus pr√≥prios chamados.

‚ùì O QUE FAZER SE O PROBLEMA PERSISTIR?
Adicione uma contesta√ß√£o ao chamado ou crie um novo chamado relacionado.

‚ùì COMO ALTERO MINHA SENHA?
Apenas administradores podem alterar senhas no menu 'Alterar Senha'.

‚ùì POSSO VER CHAMADOS DE OUTRAS PESSOAS?
‚Ä¢ Funcion√°rio: N√£o, apenas seus pr√≥prios
‚Ä¢ T√©cnico: Sim, todos os chamados
‚Ä¢ Admin: Sim, todos os chamados

‚ùì PRECISO DE TREINAMENTO?
Este manual cont√©m todas as informa√ß√µes necess√°rias. Para d√∫vidas espec√≠ficas, contate o suporte.

üìû SUPORTE T√âCNICO:
‚Ä¢ E-mail: suporte@interfix.com
‚Ä¢ Telefone: (12) 3456-7890
‚Ä¢ Hor√°rio: Segunda a Sexta, 8h √†s 18h";
        }

        private string ObterTextoNivel()
        {
            switch (_nivelAcesso)
            {
                case 1:
                    return "Funcion√°rio";
                case 2:
                    return "T√©cnico";
                case 3:
                    return "Administrador";
                default:
                    return "Desconhecido";
            }
        }

        private string ObterFuncionalidadesDisponiveis()
        {
            if (_nivelAcesso == 1)
                return "‚Ä¢ Criar novos chamados\n‚Ä¢ Visualizar seus chamados\n‚Ä¢ Adicionar contesta√ß√µes";
            else if (_nivelAcesso == 2)
                return "‚Ä¢ Visualizar todos os chamados\n‚Ä¢ Gerenciar chamados\n‚Ä¢ Atribuir t√©cnicos\n‚Ä¢ Resolver chamados\n‚Ä¢ Gerar relat√≥rios";
            else if (_nivelAcesso == 3)
                return "‚Ä¢ Todas as funcionalidades de T√©cnico\n‚Ä¢ Criar e gerenciar usu√°rios\n‚Ä¢ Alterar senhas\n‚Ä¢ Configura√ß√µes do sistema";
            else
                return "Nenhuma funcionalidade dispon√≠vel";
        }
    }

    #endregion
}